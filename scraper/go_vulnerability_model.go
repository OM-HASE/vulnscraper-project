package main

import (
    "context"
    "time"

    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/bson/primitive"
    "go.mongodb.org/mongo-driver/mongo"
)

type Vulnerability struct {
    ID          primitive.ObjectID `bson:"_id,omitempty" json:"id"`
    CVE         string             `bson:"cve" json:"cve"`
    Title       string             `bson:"title" json:"title"`
    Description string             `bson:"description" json:"description"`
    Severity    string             `bson:"severity" json:"severity"`
    CVSS        float64            `bson:"cvss" json:"cvss"`
    Vendor      string             `bson:"vendor" json:"vendor"`
    Product     string             `bson:"product" json:"product"`
    Version     string             `bson:"version" json:"version"`
    Published   time.Time          `bson:"published" json:"published"`
    Updated     time.Time          `bson:"updated" json:"updated"`
    References  []string           `bson:"references" json:"references"`
    Tags        []string           `bson:"tags" json:"tags"`
    Status      string             `bson:"status" json:"status"`
}

type VulnerabilityRepository struct {
    collection *mongo.Collection
}

func NewVulnerabilityRepository(db *mongo.Database) *VulnerabilityRepository {
    return &VulnerabilityRepository{
        collection: db.Collection("vulnerabilities"),
    }
}

func (r *VulnerabilityRepository) Create(ctx context.Context, vuln *Vulnerability) error {
    vuln.ID = primitive.NewObjectID()
    _, err := r.collection.InsertOne(ctx, vuln)
    return err
}

func (r *VulnerabilityRepository) FindByCVE(ctx context.Context, cve string) (*Vulnerability, error) {
    var vuln Vulnerability
    err := r.collection.FindOne(ctx, bson.M{"cve": cve}).Decode(&vuln)
    if err != nil {
        return nil, err
    }
    return &vuln, nil
}

func (r *VulnerabilityRepository) Update(ctx context.Context, vuln *Vulnerability) error {
    _, err := r.collection.ReplaceOne(ctx, bson.M{"cve": vuln.CVE}, vuln)
    return err
}
